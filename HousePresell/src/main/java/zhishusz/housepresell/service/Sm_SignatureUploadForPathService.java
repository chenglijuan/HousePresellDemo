package zhishusz.housepresell.service;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.InputStream;import java.util.Properties;import javax.servlet.http.HttpServletRequest;import javax.transaction.Transactional;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.xiaominfo.oss.sdk.ReceiveMessage;import com.xiaominfo.oss.sdk.client.FileBytesResponse;import zhishusz.housepresell.controller.form.Sm_AttachmentForm;import zhishusz.housepresell.controller.form.Sm_BaseParameterForm;import zhishusz.housepresell.controller.form.Sm_SignatureForm;import zhishusz.housepresell.database.dao.Sm_AttachmentDao;import zhishusz.housepresell.database.dao.Sm_BaseParameterDao;import zhishusz.housepresell.database.po.Sm_Attachment;import zhishusz.housepresell.database.po.Sm_BaseParameter;import zhishusz.housepresell.database.po.state.S_NormalFlag;import zhishusz.housepresell.database.po.state.S_TheState;import zhishusz.housepresell.util.MyBackInfo;import zhishusz.housepresell.util.MyProperties;import zhishusz.housepresell.util.fileupload.OssServerUtil;import zhishusz.housepresell.util.ftp.FTPTools;/* * Service签章文件上传（返回oss路径） * Company：ZhiShuSZ */@Service@Transactionalpublic class Sm_SignatureUploadForPathService{	@Autowired	private Sm_AttachmentDao sm_AttachmentDao;// 附件	@Autowired	private OssServerUtil ossUtil;// 本地上传OSS	@Autowired	private Sm_BaseParameterDao sm_BaseParameterDao;	public Properties execute(Sm_SignatureForm model,HttpServletRequest request)	{		Properties properties = new MyProperties();		// 签章后的文件路径		String signaturePath = model.getSignaturePath();		// 签章之前的文件网络路径		String signaturePrefixPath = model.getSignaturePrefixPath();				System.out.println("签章文件路径signaturePath============="+signaturePath);		// 上传Oss-Server				/*		 * xsz by time 2019-3-12 19:19:48		 * 更改为调用ftp上传文件		 */		/*ReceiveMessage upload = ossUtil.upload(signaturePath);		System.out.println("本地上传OSSsignaturePath============="+upload);		if (null == upload)		{			return MyBackInfo.fail(properties, "文件上传失败");		}		FileBytesResponse ossMessage = upload.getData().get(0);		if (null == ossMessage)		{			return MyBackInfo.fail(properties, "文件上传失败");		}		String httpUrl = ossMessage.getUrl();*/				/*		 * 利用ftp上传签章文件到oss-server文件夹下		 */		//查询ftp配置		Sm_BaseParameterForm baseParameterFrom = new Sm_BaseParameterForm();		baseParameterFrom.setParametertype("68");		baseParameterFrom.setTheValue("68001");		Sm_BaseParameter sm_BaseParameter = sm_BaseParameterDao.findOneByQuery_T(sm_BaseParameterDao.getQuery(sm_BaseParameterDao.getBasicHQL(), baseParameterFrom));				if(null == sm_BaseParameter)		{			return MyBackInfo.fail(properties, "未查询到FTP配置信息");		}		String theName = sm_BaseParameter.getTheName();//路径&端口号&用户名&密码		String[] split = theName.split("&");//		String urlPath = model.getUrlPath();//获取OSS返回路径		String urlPath = "";		FileBytesResponse fileBytesResponse = null;//返回参数		ossUtil.setRemoteType("1");		ReceiveMessage uploadOrgObjJson = ossUtil.stringUpload("TEST");//模拟上传获取返回路径		if(uploadOrgObjJson.getData()!=null)		{			fileBytesResponse = uploadOrgObjJson.getData().get(0);			if(uploadOrgObjJson.getData().get(0).getUrl()!=null)			{				urlPath = uploadOrgObjJson.getData().get(0).getUrl();//获取文件路径			}		}				if(null == urlPath || urlPath.trim().isEmpty())		{			urlPath = "http://cz.zhishusz.com:19000/OssSave/bananaUpload/201903/12/ff4935a11a544f3b94759c0b6c2ca18e.png";		}		int indexOf = urlPath.indexOf("/bananaUpload/");		String substring = urlPath.substring(indexOf);		int lastIndexOf = substring.lastIndexOf('/');		String substring2 = substring.substring(0, lastIndexOf);//上传ftp路径				String substring3 = urlPath.substring(0, indexOf);//返回前缀		/*try		{			FTPManager ftpManager = FTPManager.getInstance();			ftpManager.setInfo(split[0], Integer.parseInt(split[1]), split[2], split[3], null);						ftpManager.upload("", signaturePath, true);		}		catch (Exception e)		{						return MyBackInfo.fail(properties, "FTP上传失败："+e.getMessage());					}*/		InputStream fileInputStream;		try		{			fileInputStream = new FileInputStream(new File(signaturePath));			boolean upload = FTPTools.upload(split[0], Integer.parseInt(split[1]), split[2], split[3], substring2, fileInputStream, model.getFileName()+".pdf");			System.out.println("UPLOAD:"+upload);						if(!upload)			{				return MyBackInfo.fail(properties, "上传文件FTP服务器失败！");			}		}		catch (FileNotFoundException e)		{			return MyBackInfo.fail(properties, "指定文件不存在！");		}		//		http://cz.zhishusz.com:19000/OssSave/bananaUpload/201903/12/ff4935a11a544f3b94759c0b6c2ca18e.png//		String httpUrl = "http://cz.zhishusz.com:19000/OssSave"+substring2+"/"+model.getFileName()+".pdf";		String httpUrl = substring3+substring2+"/"+model.getFileName()+".pdf";				File file = new File(signaturePath);		/*		 * 不存在签章之前的网络路径，		 * 说明是附件上传模块		 * 反之，是审批模块的		 */		if (null != signaturePrefixPath && !signaturePrefixPath.trim().isEmpty())		{			Sm_AttachmentForm attachmentModel = new Sm_AttachmentForm();			attachmentModel.setTheLink(signaturePrefixPath);			attachmentModel.setTheState(S_TheState.Normal);			// 根据附件网络路径获取指定附件			Sm_Attachment sm_Attachment = sm_AttachmentDao					.findOneByQuery_T(sm_AttachmentDao.getQuery(sm_AttachmentDao.getBasicHQL(), attachmentModel));			if (null == sm_Attachment)			{				return MyBackInfo.fail(properties, "未查找到对应附件，请确认后重试");			}			 			// 切换文件资源地址并保存			sm_Attachment.setTheLink(httpUrl);			sm_Attachment.setMd5Info("md5Info");			sm_Attachment.setTheSize(String.valueOf(file.length()));			sm_AttachmentDao.save(sm_Attachment);					}						//签章文件上传完成后删除		try		{			file.delete();		}		catch (Exception e)		{			System.out.println("删除文件异常：signaturePath="+signaturePath);		}				properties.put("pdfUrl", httpUrl);		properties.put(S_NormalFlag.result, S_NormalFlag.success);		properties.put(S_NormalFlag.info, S_NormalFlag.info_Success);		return properties;	}			public Properties executeBak(Sm_SignatureForm model,HttpServletRequest request)	{		Properties properties = new MyProperties();		// 签章后的文件路径		String signaturePath = model.getSignaturePath();		// 签章之前的文件网络路径		String signaturePrefixPath = model.getSignaturePrefixPath();				System.out.println("签章文件路径signaturePath============="+signaturePath);		// 上传Oss-Server						ReceiveMessage upload = ossUtil.upload(signaturePath);		System.out.println("本地上传OSSsignaturePath============="+upload);		if (null == upload)		{			return MyBackInfo.fail(properties, "文件上传失败");		}		FileBytesResponse ossMessage = upload.getData().get(0);		if (null == ossMessage)		{			return MyBackInfo.fail(properties, "文件上传失败");		}		String httpUrl = ossMessage.getUrl();								File file = new File(signaturePath);		/*		 * 不存在签章之前的网络路径，		 * 说明是附件上传模块		 * 反之，是审批模块的		 */		if (null != signaturePrefixPath && !signaturePrefixPath.trim().isEmpty())		{			Sm_AttachmentForm attachmentModel = new Sm_AttachmentForm();			attachmentModel.setTheLink(signaturePrefixPath);			attachmentModel.setTheState(S_TheState.Normal);			// 根据附件网络路径获取指定附件			Sm_Attachment sm_Attachment = sm_AttachmentDao					.findOneByQuery_T(sm_AttachmentDao.getQuery(sm_AttachmentDao.getBasicHQL(), attachmentModel));			if (null == sm_Attachment)			{				return MyBackInfo.fail(properties, "未查找到对应附件，请确认后重试");			}			 			// 切换文件资源地址并保存			sm_Attachment.setTheLink(httpUrl);			sm_Attachment.setMd5Info("md5Info");			sm_Attachment.setTheSize(String.valueOf(file.length()));			sm_AttachmentDao.save(sm_Attachment);					}						//签章文件上传完成后删除		try		{			file.delete();		}		catch (Exception e)		{			System.out.println("删除文件异常：signaturePath="+signaturePath);		}				properties.put("pdfUrl", httpUrl);		properties.put(S_NormalFlag.result, S_NormalFlag.success);		properties.put(S_NormalFlag.info, S_NormalFlag.info_Success);		return properties;	}}