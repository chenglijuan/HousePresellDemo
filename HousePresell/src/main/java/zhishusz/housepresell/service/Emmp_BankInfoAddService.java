package zhishusz.housepresell.service;import zhishusz.housepresell.controller.form.Emmp_BankInfoForm;import zhishusz.housepresell.controller.form.Emmp_OrgMemberForm;import zhishusz.housepresell.database.dao.Emmp_BankInfoDao;import zhishusz.housepresell.database.dao.Sm_UserDao;import zhishusz.housepresell.database.po.Emmp_BankInfo;import zhishusz.housepresell.database.po.extra.MsgInfo;import zhishusz.housepresell.database.po.state.S_NormalFlag;import zhishusz.housepresell.database.po.state.S_TheState;import zhishusz.housepresell.util.MyBackInfo;import zhishusz.housepresell.util.MyProperties;import zhishusz.housepresell.util.MyString;import zhishusz.housepresell.util.project.AttachmentJudgeExistUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Properties;import javax.transaction.Transactional;import cn.hutool.core.lang.Validator;/* * Service添加操作：金融机构(承办银行) * Company：ZhiShuSZ * */@Service @Transactionalpublic class Emmp_BankInfoAddService{	private static final String BUSI_CODE = "020201";//具体业务编码参看SVN文件"Document\原始需求资料\功能菜单-业务编码.xlsx"	@Autowired private Emmp_BankInfoDao emmp_BankInfoDao;	@Autowired	private Sm_BusinessCodeGetService sm_BusinessCodeGetService;	@Autowired private Sm_UserDao sm_UserDao;	//机构成员	@Autowired	private Emmp_OrgMemberAddService emmp_OrgMemberAddService;	//附件相关	@Autowired	private Sm_AttachmentBatchAddService sm_AttachmentBatchAddService;	@Autowired	private AttachmentJudgeExistUtil attachmentJudgeExistUtil;	public Properties execute(Emmp_BankInfoForm model)	{		Properties properties = new MyProperties();		String eCode = model.geteCode();		String busiState = model.getBusiState();		String theName = model.getTheName();		String shortName = model.getShortName();		String leader = model.getLeader();		String address = model.getAddress();		String capitalCollectionModel = model.getCapitalCollectionModel();		String theType = model.getTheType();		String postalAddress = model.getPostalAddress();		String postalPort = model.getPostalPort();		String contactPerson = model.getContactPerson();		String contactPhone = model.getContactPhone();		String ftpDirAddress = model.getFtpDirAddress();		String ftpAddress = model.getFtpAddress();		String ftpPort = model.getFtpPort();		String ftpUserName = model.getFtpUserName();		String ftpPwd = model.getFtpPwd();		String financialInstitution = model.getFinancialInstitution();		String theTypeOfPOS = model.getTheTypeOfPOS();		String eCodeOfSubject = model.geteCodeOfSubject();		String eCodeOfProvidentFundCenter = model.geteCodeOfProvidentFundCenter();		String remark = model.getRemark();		String bankNo = model.getBankNo();		String bankCode = model.getBankCode();		if (theName == null || theName.length() == 0)		{			return MyBackInfo.fail(properties, "银行名称不能为空");		}		if (shortName == null || shortName.length() == 0)		{			return MyBackInfo.fail(properties, "银行简称不能为空");		}		if (capitalCollectionModel == null || capitalCollectionModel.length() == 0)		{			return MyBackInfo.fail(properties, "资金归集模式不能为空");		}		if (contactPerson == null || contactPerson.length() == 0)		{			return MyBackInfo.fail(properties, "联系人不能为空");		}		if (contactPhone == null || contactPhone.length() == 0)		{			return MyBackInfo.fail(properties, "联系电话不能为空");		}		MsgInfo msgInfo = attachmentJudgeExistUtil.isExist(model);		if(!msgInfo.isSuccess()){			return MyBackInfo.fail(properties, msgInfo.getInfo());		}		MyString myString = MyString.getInstance();		if (!Validator.isMobile(contactPhone) && !myString.checkFixedNumber(contactPhone))		{			return MyBackInfo.fail(properties, S_NormalFlag.info_PhoneNumberFail);		}		//逻辑开始		int theState = S_TheState.Normal;		long createTimeStamp = System.currentTimeMillis();		Emmp_BankInfo emmp_BankInfo = new Emmp_BankInfo();		emmp_BankInfo.setTheState(theState);		emmp_BankInfo.setBusiState(busiState);		emmp_BankInfo.seteCode(sm_BusinessCodeGetService.execute(BUSI_CODE));		emmp_BankInfo.setCreateTimeStamp(createTimeStamp);		emmp_BankInfo.setUserStart(model.getUser());		emmp_BankInfo.setUserUpdate(model.getUser());		emmp_BankInfo.setLastUpdateTimeStamp(System.currentTimeMillis());		emmp_BankInfo.setTheName(theName);		emmp_BankInfo.setShortName(shortName);		emmp_BankInfo.setLeader(leader);		emmp_BankInfo.setAddress(address);		emmp_BankInfo.setCapitalCollectionModel(capitalCollectionModel);		emmp_BankInfo.setTheType(theType);		emmp_BankInfo.setPostalAddress(postalAddress);		emmp_BankInfo.setPostalPort(postalPort);		emmp_BankInfo.setContactPerson(contactPerson);		emmp_BankInfo.setContactPhone(contactPhone);		emmp_BankInfo.setFtpDirAddress(ftpDirAddress);		emmp_BankInfo.setFtpAddress(ftpAddress);		emmp_BankInfo.setFtpPort(ftpPort);		emmp_BankInfo.setFtpUserName(ftpUserName);		emmp_BankInfo.setFtpPwd(ftpPwd);		emmp_BankInfo.setFinancialInstitution(financialInstitution);		emmp_BankInfo.setTheTypeOfPOS(theTypeOfPOS);		emmp_BankInfo.seteCodeOfSubject(eCodeOfSubject);		emmp_BankInfo.seteCodeOfProvidentFundCenter(eCodeOfProvidentFundCenter);		emmp_BankInfo.setRemark(remark);		emmp_BankInfo.setBankCode(bankCode);		emmp_BankInfo.setBankNo(bankNo);		emmp_BankInfo.setIsUsing(0);		emmp_BankInfoDao.save(emmp_BankInfo);		sm_AttachmentBatchAddService.execute(model, emmp_BankInfo.getTableId());		//机构成员		Emmp_OrgMemberForm[] orgMemberList = model.getOrgMemberList();		if (orgMemberList != null && orgMemberList.length > 0)		{			for (Emmp_OrgMemberForm orgMemberForm : orgMemberList)			{				orgMemberForm.setBankId(emmp_BankInfo.getTableId());				emmp_OrgMemberAddService.execute(orgMemberForm);			}		}		properties.put(S_NormalFlag.result, S_NormalFlag.success);		properties.put(S_NormalFlag.info, S_NormalFlag.info_Success);		properties.put("tableId", emmp_BankInfo.getTableId());		return properties;	}}