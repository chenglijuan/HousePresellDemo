package zhishusz.housepresell.service;import zhishusz.housepresell.controller.form.Sm_BaseParameterForm;import zhishusz.housepresell.controller.form.Sm_PolicyRecordForm;import zhishusz.housepresell.database.dao.Sm_BaseParameterDao;import zhishusz.housepresell.database.dao.Sm_PolicyRecordDao;import zhishusz.housepresell.database.po.Sm_BaseParameter;import zhishusz.housepresell.database.po.Sm_PolicyRecord;import zhishusz.housepresell.database.po.state.S_NormalFlag;import zhishusz.housepresell.database.po.state.S_PolicyState;import zhishusz.housepresell.database.po.state.S_TheState;import zhishusz.housepresell.util.MyProperties;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.Properties;import javax.transaction.Transactional;/* * Service开发企业登录政策公告加载 * Company：ZhiShuSZ */@Service@Transactionalpublic class Sm_HomePagePolicyRecordListService{	@Autowired	private Sm_PolicyRecordDao sm_PolicyRecordDao;// 政策公告	@Autowired	private Sm_BaseParameterDao sm_BaseParameterDao;// 基础参数	@SuppressWarnings("unchecked")	public Properties execute(Sm_PolicyRecordForm model)	{		Properties properties = new MyProperties();				String policyTypeCode = model.getPolicyTypeCode();		/*		 * xsz by time 2019-1-10 11:06:57		 * 开发企业登录政策公告加载:		 * 1.加载公告类型（parametertype=67）		 * 2.根据第一条公告类型加载所有公告信息		 * 如果第一个类型下没有数据，是否需要加载有数据的公告类型？		 */				// 加载公告列表		Sm_PolicyRecordForm sm_PolicyRecordModel = new Sm_PolicyRecordForm();		sm_PolicyRecordModel.setTheState(S_TheState.Normal);// 是否删除		sm_PolicyRecordModel.setPolicyState(S_PolicyState.Releaseing);// 公告状态				//如果无条件查询，加载默认		// 加载公告类型		Sm_BaseParameterForm sm_BaseParameterModel = new Sm_BaseParameterForm();		sm_BaseParameterModel.setTheState(S_TheState.Normal);		sm_BaseParameterModel.setParametertype("67");		List<Sm_BaseParameter> policyRecordTypeList;//公告类型列表		policyRecordTypeList = sm_BaseParameterDao				.findByPage(sm_BaseParameterDao.getQuery(sm_BaseParameterDao.getBasicHQL(), sm_BaseParameterModel));		if (null == policyRecordTypeList || policyRecordTypeList.size() == 0)		{			policyRecordTypeList = new ArrayList<Sm_BaseParameter>();		}				if(null == policyTypeCode || policyTypeCode.trim().isEmpty())		{//			//如果无条件查询，加载默认//			// 加载公告类型//			sm_BaseParameterModel.setTheState(S_TheState.Normal);//			sm_BaseParameterModel.setParametertype("67");////			List<Sm_BaseParameter> policyRecordTypeList;//公告类型列表//			policyRecordTypeList = sm_BaseParameterDao//					.findByPage(sm_BaseParameterDao.getQuery(sm_BaseParameterDao.getBasicHQL(), sm_BaseParameterModel));			if (null == policyRecordTypeList || policyRecordTypeList.size() == 0)			{				policyRecordTypeList = new ArrayList<Sm_BaseParameter>();			}			else			{				sm_PolicyRecordModel.setPolicyType(policyRecordTypeList.get(0).getTheName());// 公告类型			}					}		else		{			//条件查询			sm_PolicyRecordModel.setPolicyTypeCode(policyTypeCode);		}				//构建more type页签		Sm_BaseParameter sm_BaseParameter = new Sm_BaseParameter();//		sm_BaseParameter.setTheValue("000000");//		sm_BaseParameter.setTheName("MORE");//		policyRecordTypeList.add(sm_BaseParameter);		//		sm_BaseParameter = new Sm_BaseParameter();		sm_BaseParameter.setTheValue("000001");		sm_BaseParameter.setTheName("最新");		policyRecordTypeList.add(0, sm_BaseParameter);				List<Sm_PolicyRecord> sm_PolicyRecordList;//公告列表				if("000001".equals(sm_PolicyRecordModel.getPolicyTypeCode()))		{			sm_PolicyRecordModel.setPolicyTypeCode(null);			sm_PolicyRecordList = sm_PolicyRecordDao					.findByPage(sm_PolicyRecordDao.getQuery(sm_PolicyRecordDao.getBasicHQL(), sm_PolicyRecordModel),1,5);		}		else		{						Integer totalCount = sm_PolicyRecordDao.findByPage_Size(					sm_PolicyRecordDao.getQuery_Size(sm_PolicyRecordDao.getBasicHQL(), sm_PolicyRecordModel));						if (totalCount > 0)			{				sm_PolicyRecordList = sm_PolicyRecordDao						.findByPage(sm_PolicyRecordDao.getQuery(sm_PolicyRecordDao.getBasicHQL(), sm_PolicyRecordModel),1,5);			}			else			{				sm_PolicyRecordList = new ArrayList<Sm_PolicyRecord>();			}		}				properties.put("policyRecordTypeList", policyRecordTypeList);				properties.put("sm_PolicyRecordList", sm_PolicyRecordList);				properties.put(S_NormalFlag.result, S_NormalFlag.success);		properties.put(S_NormalFlag.info, S_NormalFlag.info_Success);		return properties;	}}